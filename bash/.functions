################################################################################
################################### HELPERS ####################################
################################################################################

# Helper to test if executable exists
exists() { type -t "$1" > /dev/null 2>&1; }

# Helper to clean vars
function trimspace() {
	echo "${@//[[:blank:]]/}"
}


help(){
    cat<<__EOF__
    usage: m disk [ ls | list | info | fs | filesystems | ejectall | verify | repair | help ]
    Examples:
      m disk ls                                 # list disks
      m disk list                               # list disks
      m disk list /dev/disk0                    # list a specific disk
      m disk fs                                 # list available filesystems for formatting
      m disk filesystems                        # list available filesystems for formatting
      m disk info /dev/disk0                    # display information
      m disk ejectall                           # eject all mountable volumes
      m disk verify volume  /Volume/MyVol       # verify volume
      m disk verify disk /dev/disk0             # verify disk
      m disk repair volume /Volume/MyVol        # repair volume
      m disk repair disk /dev/disk0             # repair disk
      m disk format MS-DOS MYNAME  /dev/disk2             # format the entire disk with a windows format (MS-DOS)
      m disk format volume MS-DOS MYNAME /Volumes/myvol   # format the volume with a windows format(MS-DOS)
      m disk reformat /Volumes/myvol                      # reformat a volume
      m disk rename CURRENTNAME NEWNAME                   # rename a volume
__EOF__
}

################################################################################
################################## FUNCTIONS ###################################
################################################################################

# basic todo list
function todo {
	: "${TODO:?'TODO ENV Var not set'}"

	# If we are in a tmux session, name the file with the session name
	# If not in tmux, use the full $TODO env var for path/file
	if echo "$TERM" | grep -Fq screen && test "$TMUX" ; then
		sessname=$(tmux display -p '#S')
		todopath=$(dirname "$TODO")
		TODOFILE=$todopath/$sessname".txt"
	else
		TODOFILE=$TODO
	fi

	case "$1" in
		"-a")
			echo "${*:2}" >> "$TODOFILE"
			;;
		"-d")
			re='^[0-9]+$'
			if ! [[ "$2" =~ $re ]] ; then
				sed -i "" -e "/$2/d" "$TODOFILE" 2> /dev/null
			else
				sed -i "" -e "$2d" "$TODOFILE" 2> /dev/null
			fi
			;;
	esac
	if [ -f "$TODOFILE" ] ; then
		cat "$TODOFILE" | awk '{ print NR, "-", $0 }'
	fi
}

# find todo notes in current project
function todos {
	#local m=$(trimspace $(git diff --numstat 2> /dev/null | wc -l))
	LOCAL_DIR=$(git rev-parse --show-toplevel 2> /dev/null)
	LOCAL_DIR=${LOCAL_DIR:-.}
	find "${LOCAL_DIR}" -type f -exec grep -H -n '(TODO|FIX(ME)?):' {} \; 2> /dev/null 
}

function pathadd() {
        newelement=${1%/}
        if [ -d "$1" ] && ! echo "$PATH" | grep -E -q "(^|:)$newelement($|:)" ; then
            if [ "$2" = "after" ] ; then
                PATH="$PATH:$newelement"
            else
                PATH="$newelement:$PATH"
            fi
        fi
    }

function pathrm() {
    PATH="$(echo $PATH | sed -e "s;\(^\|:\)${1%/}\(:\|\$\);\1\2;g" -e 's;^:\|:$;;g' -e 's;::;:;g')"
}

function up(){
    local d=""
    limit=$1
    for ((i=1 ; i <= limit ; i++))
      do
        d=$d/..
      done
    d=$(echo $d | sed 's/^\///')
    if [ -z "$d" ]; then
      d=..
    fi
    cd $d
  }

# Make directory and cd into it

function mkcd() {
      mkdir -p "$*"
      cd "$*"
    }


#   ---------------------------------------
#    Development Stuff
#   ---------------------------------------

# json formatting / highlighting
function json() {
	if [ -t 0 ]; then
		python -mjson.tool <<< "$*" | pygmentize -l javascript
	else
		python -mjson.tool | pygmentize -l javascript
	fi
}

# Create a data URL from a file
function dataurl() {
	local mimeType=$(file -b --mime-type "$1")
	if [[ $mimeType == text/* ]]; then
		mimeType="${mimeType};charset=utf-8"
	fi
	echo "data:${mimeType};base64,$(openssl base64 -in "$1" | tr -d '\n')"
}

# Start an HTTP server from a directory, optionally specifying the port
function server() {
	local port="${1:-8000}"
	sleep 1 && open "http://localhost:${port}/" &
	# Set the default Content-Type to `text/plain` instead of `application/octet-stream`
	# And serve everything as UTF-8 (although not technically correct, this doesnâ€™t break anything for binary files)
	python -c $'import SimpleHTTPServer;\nmap = SimpleHTTPServer.SimpleHTTPRequestHandler.extensions_map;\nmap[""] = "text/plain";\nfor key, value in map.items():\n\tmap[key] = value + ";charset=UTF-8";\nSimpleHTTPServer.test();' "$port"
}

# Change directory to current folder in finder and run simple server.
function cdfs()
{
	cdf
	server
}

# Start a PHP server from a directory, optionally specifying the port
# (Requires PHP 5.4.0+.)
function phpserver() {
	if hash ipconfig 2>/dev/null; then
		local port="${1:-4000}"
		local ip=$(ipconfig getifaddr en1)
		if [[ -z ${ip} ]] ; then
			local ip=$(ipconfig getifaddr en0)
		fi
		sleep 1 && open "http://${ip}:${port}/" &
		php -S "${ip}:${port}"
	else
		php -S "127.0.0.1:4000"
	fi
}

# Start a .NET server using mono
function netserver() {
	local port="${1:-8080}"
	local ip=$(ipconfig getifaddr en1)
	if [[ -z ${ip} ]] ; then
		local ip=$(ipconfig getifaddr en0)
	fi
	sleep 1 && open "http://${ip}:${port}/" &
	xsp2 --port "${port}" --address "${ip}" --verbose
}

# `tre` is a shorthand for `tree` with hidden files and color enabled, ignoring
# the `.git` directory, listing directories first. The output gets piped into
# `less` with options to preserve color and line numbers, unless the output is
# small enough for one screen.
function tre() {
	tree -aC -I '.git|node_modules|bower_components' --dirsfirst "$@" | less -FRNX
}


# Swap 2 filenames around, if they exist
function swap() { 
    local TMPFILE=tmp.$$

    [ $# -ne 2 ] && echo "swap: 2 arguments needed" && return 1
    [ ! -e "$1" ] && echo "swap: $1 does not exist" && return 1
    [ ! -e "$2" ] && echo "swap: $2 does not exist" && return 1

    mv "$1" $TMPFILE
    mv "$2" "$1"
    mv $TMPFILE "$2"
}

# Use the right extraction method based on file extension
function extract() {
    if [ -f "$1" ] ; then
        case $1 in
            *.tar.bz2)   tar xvjf "$1"     ;;
            *.tar.gz)    tar xvzf "$1"     ;;
            *.bz2)       bunzip2 "$1"      ;;
            *.rar)       unrar x "$1"      ;;
            *.gz)        gunzip "$1"       ;;
            *.tar)       tar xvf "$1"      ;;
            *.tbz2)      tar xvjf "$1"     ;;
            *.tgz)       tar xvzf "$1"     ;;
            *.zip)       unzip "$1"        ;;
            *.Z)         uncompress "$1"   ;;
            *.7z)        7z x "$1"         ;;
            *)           echo "'$1' cannot be extracted via >extract<" ;;
        esac
    else
        echo "'$1' is not a valid file!"
    fi
}

# Create a horizontal rule, hr style
function hr() {
	set -f
	if [[ -n $1 ]]; then
		space_character=$( echo "$1" | head -c 1)
	else
		space_character='='
	fi
	
	for i in $(seq 1 "$(tput cols)");
	do
		echo -n "${space_character}";
	done

	echo ""
}

# Move file to a backup ".old" version
old() {
    mv "$1"{,.old}
}

# Note taking functions
nls() {
	: "${NOTE_DIR:?'NOTE_DIR ENV Var not set'}"
	ls -c "$NOTE_DIR" | grep "$*"
}

n() {
	: "${NOTE_DIR:?'NOTE_DIR ENV Var not set'}"
	if [ $# -eq 0 ]
		then
			nls
	else
		$EDITOR "$NOTE_DIR"/"$*".txt
	fi
}

# get battery level on osx
battery() {
	ioreg -l | grep -i capacity | tr '\n' ' | ' | awk '{printf("%.2f%%\n", $10/$5 * 100)}'
}

# c - browse chrome history
ch() {
	local cols sep
		cols=$(( COLUMNS / 3 ))
		sep='{::}'

		cp -f ~/Library/Application\ Support/Google/Chrome/Default/History /tmp/h

		sqlite3 -separator $sep /tmp/h \
		"select substr(title, 1, $cols), url
		from urls order by last_visit_time desc" |
		awk -F $sep '{printf "%-'$cols's  \x1b[36m%s\x1b[m\n", $1, $2}' |
		fzf --ansi --multi | sed 's#.*\(https*://\)#\1#' | xargs open
}

# fshow - git commit browser (enter for show, ctrl-d for diff, ` toggles sort)
flog() {
  local out shas sha q k
  while out=$(
      git log --graph --color=always \
          --format="%C(auto)%h%d %s %C(black)%C(bold)%cr" "$@" |
      fzf --ansi --multi --no-sort --reverse --query="$q" \
          --print-query --expect=ctrl-d --toggle-sort=\`); do
    q=$(head -1 <<< "$out")
    k=$(head -2 <<< "$out" | tail -1)
    shas=$(sed '1,2d;s/^[^a-z0-9]*//;/^$/d' <<< "$out" | awk '{print $1}')
    [ -z "$shas" ] && continue
    if [ "$k" = ctrl-d ]; then
      git diff --color=always $shas | less -R
    else
      for sha in $shas; do
        git show --color=always $sha | less -R
      done
    fi
  done
}

# fe [FUZZY PATTERN] - Open the selected file with the default editor
#   - Bypass fuzzy finder if there's only one match (--select-1)
#   - Exit if there's no match (--exit-0)
fe() {
  local file
  file=$(fzf --query="$1" --select-1 --exit-0)
  [ -n "$file" ] && ${EDITOR:-vim} "$file"
}

# fd - cd to selected directory
fd() {
  local dir
  dir=$(find ${1:-*} -path '*/\.*' -prune \
                  -o -type d -print 2> /dev/null | fzf +m) &&
  cd "$dir"
}

# fda - including hidden directories
fda() {
  local dir
  dir=$(find ${1:-.} -type d 2> /dev/null | fzf +m) && cd "$dir"
}

# cdf - cd into the directory of the selected file
cdf() {
   local file
   local dir
   file=$(fzf +m -q "$1") && dir=$(dirname "$file") && cd "$dir"
}

# Flattens files from a current directory. If files already exist, you'll be prompted to decide if you want to overwrite or not. 
flatten(){
	local dir
	find $PWD -mindepth 2 -type f -exec mv -i '{}' $PWD/ ';'
}

# Flattens files from a current directory and overwrites matching files without prompting. 
flatteni(){
  local dir
  find $PWD -mindepth 2 -type f -exec mv -n '{}' $PWD/ ';'
}

# fkill - kill process
fkill() {
  pid=$(ps -ef | sed 1d | fzf -m | awk '{print $2}')

  if [ "x$pid" != "x" ]
  then
    kill -${1:-9} $pid
  fi
}

# Override Z for use with fzf
unalias z 2> /dev/null
z() {
  if [[ -z "$*" ]]; then
    cd "$(_z -l 2>&1 | fzf +s --tac | sed 's/^[0-9,.]* *//')"
  else
    _z "$@"
  fi
}


disablereportcrash()
{
	sudo launchctl unload -w /System/Library/LaunchAgents/com.apple.ReportCrash.plist
	sudo launchctl unload -w /System/Library/LaunchDaemons/com.apple.ReportCrash.Root.plist
}

enablereportcrash()
{
	sudo launchctl load -w /System/Library/LaunchAgents/com.apple.ReportCrash.plist
	sudo launchctl load -w /System/Library/LaunchDaemons/com.apple.ReportCrash.Root.plist
}

#   -------------------------------
#     Shell Functions
#   -------------------------------
zipf () { zip -r "$1".zip "$1" ; }          # zipf:         To create a ZIP archive of a folder

# Colorize cat output

	cat() {
	    local out colored
	    out=$(/bin/cat $@)
	    colored=$(echo $out | pygmentize -f console -g 2>/dev/null)
	    [[ -n $colored ]] && echo "$colored" || echo "$out"
	}

# extract:  Extract most know archives with one command

    extract () {
        if [ -f $1 ] ; then
          case $1 in
            *.tar.bz2)   tar xjf $1     ;;
            *.tar.gz)    tar xzf $1     ;;
            *.bz2)       bunzip2 $1     ;;
            *.rar)       unrar e $1     ;;
            *.gz)        gunzip $1      ;;
            *.tar)       tar xf $1      ;;
            *.tbz2)      tar xjf $1     ;;
            *.tgz)       tar xzf $1     ;;
            *.zip)       unzip $1       ;;
            *.Z)         uncompress $1  ;;
            *.7z)        7z x $1        ;;
            *)     echo "'$1' cannot be extracted via extract()" ;;
             esac
         else
             echo "'$1' is not a valid file"
         fi
    }
    
    
# This bash function is more complicated but I use it all the time. 
# It reads a list of items to be installed and compares it to a list of 
# already existing items on your computer. This allows you only to 
# install the items that are missing.

function to_install() {
  local debug desired installed i desired_s installed_s remain
  if [[ "$1" == 1 ]]; then debug=1; shift; fi
    # Convert args to arrays, handling both space- and newline-separated lists.
    read -ra desired < <(echo "$1" | tr '\n' ' ')
    read -ra installed < <(echo "$2" | tr '\n' ' ')
    # Sort desired and installed arrays.
    unset i; while read -r; do desired_s[i++]=$REPLY; done < <(
      printf "%s\n" "${desired[@]}" | sort
    )
    unset i; while read -r; do installed_s[i++]=$REPLY; done < <(
      printf "%s\n" "${installed[@]}" | sort
    )
    # Get the difference. comm is awesome.
    unset i; while read -r; do remain[i++]=$REPLY; done < <(
      comm -13 <(printf "%s\n" "${installed_s[@]}") <(printf "%s\n" "${desired_s[@]}")
  )
  [[ "$debug" ]] && for v in desired desired_s installed installed_s remain; do
    echo "$v ($(eval echo "\${#$v[*]}")) $(eval echo "\${$v[*]}")"
  done
  echo "${remain[@]}"
}    


# Portforwarding shortcut - pfwd hostname {6000..6009}
function pfwd {
  for i in ${@:2}
  do
    echo Forwarding port $i
    ssh -N -L $i:localhost:$i $1 &
  done  
}


#   ---------------------------------------
#    GIT
#   ---------------------------------------

function gitexport(){
	mkdir -p "$1"
	git archive master | tar -x -C "$1"
}

#My favorite git shortcut. Adds all changes, commits them with the specified message and pushes to the default repo in one shot. 
# Usage: lazygit "{message here}"
function lazygit() {
    git add .
    git commit -a -m "$1"
    git push
}

# Return current git branch
function parse_git_branch {
	local B=$(git branch --no-color 2> /dev/null | sed -e '/^[^*]/d' -e 's/* \(.*\)/(\1)/')
	echo "${B}"
}

# Return number of staged files in folder
function gitstaged() {
	local s=$(trimspace "$(git diff --cached --numstat 2> /dev/null | wc -l)" )
	if [ "0" == "${s}" ]; then
		s=""
	else
		s=" stg: ${s}"
	fi
	echo "${s}"
}

# Return number of modified files in folder
function gitmodified() {
	local m=$(trimspace "$(git diff --numstat 2> /dev/null | wc -l)" )
	if [ "0" == "${m}" ]; then
		m=""
	else
		m=" mod: ${m}"
	fi
	echo "${m}"
}

# Return number of untracked files in folder
function gituntracked() {
	local u=$(trimspace "$(git ls-files --exclude-standard --others 2> /dev/null | wc -l)" )
	if [ "0" == "${u}" ]; then
		u=""
	else
		u=" untrk: ${u}"
	fi
	echo "${u}"
}

function gittreestatus() {
	if [ $# -eq 0 ]; then
		for i in $(find . -type d -maxdepth 1)
		do
			cd "$i" && echo -e "$(pwd)" "${STAGED_COLOR}$(gitstaged)${MODIFIED_COLOR}$(gitmodified)${UNTRACKED_COLOR}$(gituntracked)${RESET_COLOR}" && cd - > /dev/null
		done
	else
		for i in $(find "$1" -type d -maxdepth 1)
		do
			cd "$i" && echo -e "$(pwd)" "${STAGED_COLOR}$(gitstaged)${MODIFIED_COLOR}$(gitmodified)${UNTRACKED_COLOR}$(gituntracked)${RESET_COLOR}" && cd - > /dev/null
		done
	fi
}

# Loops through all branches and does a pull

gitpullall() {
  REMOTES="$@";
  if [ -z "$REMOTES" ]; then
    REMOTES=$(git remote);
  fi
  REMOTES=$(echo "$REMOTES" | xargs -n1 echo)
  CLB=$(git branch -l|awk '/^\*/{print $2}');
  echo "$REMOTES" | while read REMOTE; do
    git remote update "$REMOTE"
    git remote show "$REMOTE" -n \
    | awk '/merges with remote/{print $5" "$1}' \
    | while read line; do
      RB=$(echo "$line"|cut -f1 -d" ");
      ARB="refs/remotes/$REMOTE/$RB";
      LB=$(echo "$line"|cut -f2 -d" ");
      ALB="refs/heads/$LB";
      NBEHIND=$(( $(git rev-list --count "$ALB".."$ARB" 2>/dev/null) +0));
      NAHEAD=$(( $(git rev-list --count "$ARB".."$ALB" 2>/dev/null) +0));
      if [ "$NBEHIND" -gt 0 ]; then
        if [ "$NAHEAD" -gt 0 ]; then
          echo " branch $LB is $NBEHIND commit(s) behind and $NAHEAD commit(s) ahead of $REMOTE/$RB. could not be fast-forwarded";
        elif [ "$LB" = "$CLB" ]; then
          echo " branch $LB was $NBEHIND commit(s) behind of $REMOTE/$RB. fast-forward merge";
          git merge -q "$ARB";
        else
          echo " branch $LB was $NBEHIND commit(s) behind of $REMOTE/$RB. reseting local branch to remote";
          git branch -l -f "$LB" -t "$ARB" >/dev/null;
        fi
      fi
    done
  done
}

# initialize git in a directory with existing project
# requires remote repo path

function gitinit()
{
  git init
  git add .
  git commit -m "First commit"
  git remote add origin $1
  git push -u origin master
}

# for when someone doesn't quite need to know how much I procrastinated in that particular task
# Expects date to set or not to unset

function gitlie() {
    if [[ "$1" == "not" ]]
    then
      unset GIT_AUTHOR_DATE
      unset GIT_COMMITTER_DATE
      return 0
    fi
    export GIT_AUTHOR_DATE="$1"
    export export GIT_COMMITTER_DATE="$1"
  }

# useful if you just pushed some code and realised you missed something

function gitoops() { 
  git add -A "$@" && git commit --amend --no-edit && gpcfl 
}

# squash!
function gitsquash() {
  if [ -n "$1" ]; then
    git reset --soft HEAD~$1 && git commit --edit -m"$(git log --format=%B --reverse HEAD..HEAD@{1})"
  fi
}

gitsquash () { 
  git reset $(git commit-tree HEAD^{tree} -m \"$@\"); 
}

function gilaravel() { 
	curl -sL "https://www.gitignore.io/api/vue,vim,vuejs,macos,windows,laravel,jetbrains,phpstorm+all,jetbrains+all,microsoftoffice;" > .gitignore
}

git1()
{
  if [ $# -gt 0 ] && [ "$1" == "push" ] ; then
     shift
     command gitleaks --repo-path=. -v && git exitloop "$@"
  elif [ $# -gt 0 ] && [ "$1" == "exitloop" ] ; then
     shift
     command git push "$@"
  else
     command git "$@"
  fi
}

#   ---------------------------------------
#    File System
#   ---------------------------------------

# Generates a tree view from the current directory
function tree(){
	pwd
	ls -R | grep ":$" |   \
	sed -e 's/:$//' -e 's/[^-][^\/]*\//--/g' -e 's/^/   /' -e 's/-/|/'
}

function findfilesbyextension()
{	
	find $PWD -iname "*.$1";
}

function deletefilesbyextension()
{	
	confirm "Would you really like to delete files ended with $1?" && find $PWD -iname "*.$1" -delete;
}

# Appends string to end of file names.
function appendstringtofilename(){
  for i in *; do name="${i%.*}"; mv "$i" "${name}$1${i#$name}"; done
}

# Previews string appended to end of file names.
function previewappendstringtofilename(){
  for i in *; do name="${i%.*}"; echo "$i" "${name}$1${i#$name}"; done
}

# Prepends string to beginning of file names.
function prependstringtofilename(){
  for i in *; do name="${i%.*}"; mv "$i" "$1${name}${i#$name}"; done
}

# Previews string prepended to beginning of file names.
function previewprependstringtofilename(){
  for i in *; do name="${i%.*}"; echo "$i" "$1${name}${i#$name}"; done
}

# Renames a string in the file name.
# Expects 2 inputs, string to search for and string to replace with.
function renamestringinfilename(){
  find . -type f -name "*$1*" -exec sh -c 'mv "$0" "${0/$1/$2}"' '{}' \;
}

# Shows the output of renames a string in the file name before replacing. 
# Used to verify changes before making them.
# Expects 2 inputs, string to search for and string to replace with.
function previewrenamestringinfilename(){
  find . -type f -name "*$1*" -exec sh -c 'echo "${0/$1/$2}"' '{}' \;
}

# Replaces all spaces in file name with hyphens.
function replacespacewithhyphen(){
  for i in *; do mv "$i" "`echo $i | sed -e 's, ,-,g'`"; done
}

function searchstring(){
  grep -rnwi "$i" "$PWD"
}

#lowercase file names recursively
function lowercasefilenames()
{
  find . -depth -name '* *' | while IFS= read -r f ; do mv -v "$f" "$(dirname "$f")/$(basename "$f"|tr '[A-Z]' '[a-z]')" ; done
}

# Create symlink to a path in Apache. 
# Usage linkapache "{Source Path}" "{Folder Name}"
function linkapache()
{
	ln -s $1 /Applications/MAMP/htdocs/$2
}

function crushpng()
{
	for png in `find $PWD -name "*.png"`;
	do
		echo "crushing $png"
		pngcrush -rem allb -brute "$png" temp.png
		mv -f temp.png $png
	done;
}

function ejectall(){
    osascript -e 'tell application "Finder" to eject (every disk whose ejectable is true)'
}

# jump to root folder of git repo
function cdroot() {
  LOCAL_DIR=$(git rev-parse --show-toplevel)
  LOCAL_DIR=${LOCAL_DIR:-.}
  cd "$LOCAL_DIR"
}

# Change directory to folder opened in finder

cdf() {
    target=`osascript -e 'tell application "Finder" to if (count of Finder windows) > 0 then get POSIX path of (target of front Finder window as text)'`
    if [ "$target" != "" ]; then
        cd "$target"; pwd
    else
        echo 'No Finder window found' >&2
    fi
}


# Lists members of Admin group. 
# Usage: members admin 
# From https://superuser.com/questions/279891/list-all-members-of-a-group-mac-os-x

members () {
  dscl . -list /Users | while read user; do
    printf "$user "
    dsmemberutil checkmembership -U "$user" -G "$*"
  done | grep "is a member" | cut -d " " -f 1;
};


#
# Internal Functions
#

confirm () {
    # call with a prompt string or use a default
    read -r -p "${1:-Are you sure? [y/N]} " response
    case $response in
        [yY][eE][sS]|[yY]) 
            true
            ;;
        *)
            false
            ;;
    esac
}

#   ---------------------------------------
#    Dock
#   ---------------------------------------

function add_blank_space(){
    echo "New blank space added to the Dock"
    defaults write com.apple.dock persistent-apps -array-add '{"tile-type"="spacer-tile";}'
    killall Dock
}

#   ---------------------------------------
#    Laravel
#   ---------------------------------------

# Create a new Laravel Spark project and add the packages I use most.
# Note: Assumes spark is on the path
# Installs Dbal, Sentry for Laravel, Laravel Horizon, Redis Driver for Queues, Laravel Cookie Consent
# Development: debugbar, dusk, query detector, ide helper, and telescope
# Added support for Laravel Nova as optional paraemter 2:
# Usage: newspark projectname nova or newspark projectname 

function newspark(){
  spark new $1 --team-billing
  cd $1
  composer require doctrine/dbal sentry/sentry-laravel predis/predis spatie/laravel-cookie-consent
  composer require barryvdh/laravel-debugbar laravel/dusk beyondcode/laravel-query-detector barryvdh/laravel-ide-helper laravel/telescope orangehill/iseed --dev
  php artisan clear-compiled
  php artisan ide-helper:generate
  php artisan vendor:publish --provider="BeyondCode\QueryDetector\QueryDetectorServiceProvider"
  php artisan vendor:publish --provider="Barryvdh\LaravelIdeHelper\IdeHelperServiceProvider" --tag=config
  #appends the ide-helper script to composer.json 
  cat composer.json | jq '.scripts += {"post-update-cmd": [ "Illuminate\\Foundation\\ComposerScripts::postUpdate", "@php artisan ide-helper:generate", "@php artisan ide-helper:meta"]}' > composer.json

  if [ $2 = "nova"  ];
  then 

    cat composer.json | jq '.repositories += [{"type": "composer", "url": "https://nova.laravel.com"}]' > composer.json
    sed -i "" 's/=stack/=daily/g' .env
    sed -i "" 's/=Laravel/=$1/g' .env
    sed -i "" 's/http://localhost/https://$1.local/g' .env
    composer require laravel/nova
    php artisan nova:install
    php artisan migrate
    cat composer.json | .scripts += {"post-update-cmd": [         "@php artisan nova:publish"     ]} > composer.json

  fi; 

  mkdir src
  shopt -s dotglob
  mv $PWD/* $PWD/src
  cd ..
  curl -sL "https://www.gitignore.io/api/vue,vim,vuejs,macos,windows,laravel,jetbrains,phpstorm+all,jetbrains+all,microsoftoffice;" > .gitignore
}

# Create a new Laravel Spark project and add the packages I use most.
# Note: Assumes spark is on the path
# Installs Dbal, Sentry for Laravel, Laravel Horizon, Redis Driver for Queues, Laravel Cookie Consent
# Development: debugbar, dusk, query detector, ide helper, and telescope
# Added support for Laravel Nova as optional paraemter 2:
# Usage: newspark projectname nova or newspark projectname 

function newlaravel(){
  laravel new $1
  cd $1
  composer require doctrine/dbal sentry/sentry-laravel predis/predis spatie/laravel-cookie-consent
  composer require barryvdh/laravel-debugbar laravel/dusk beyondcode/laravel-query-detector barryvdh/laravel-ide-helper laravel/telescope orangehill/iseed --dev
  php artisan clear-compiled
  php artisan ide-helper:generate
  php artisan vendor:publish --provider="BeyondCode\QueryDetector\QueryDetectorServiceProvider"
  php artisan vendor:publish --provider="Barryvdh\LaravelIdeHelper\IdeHelperServiceProvider" --tag=config
  #appends the ide-helper script to composer.json 
  cat composer.json | jq '.scripts += {"post-update-cmd": [ "Illuminate\\Foundation\\ComposerScripts::postUpdate", "@php artisan ide-helper:generate", "@php artisan ide-helper:meta"]}' > composer.json

  if [ $2 = "nova"  ];
  then 

    cat composer.json | jq '.repositories += [{"type": "composer", "url": "https://nova.laravel.com"}]' > composer.json
    sed -i "" 's/=stack/=daily/g' .env
    sed -i "" 's/=Laravel/=$1/g' .env
    sed -i "" 's/http://localhost/https://$1.local/g' .env
    composer require laravel/nova
    php artisan nova:install
    php artisan migrate
    cat composer.json | .scripts += {"post-update-cmd": [         "@php artisan nova:publish"     ]} > composer.json

  fi; 

  mkdir src
  shopt -s dotglob
  mv $PWD/* $PWD/src
  cd ..
  curl -sL "https://www.gitignore.io/api/vue,vim,vuejs,macos,windows,laravel,jetbrains,phpstorm+all,jetbrains+all,microsoftoffice;" > .gitignore
}

function testspark()
{
    project=${1:-name};
    nova=${2:-nova};
    echo $nova;
    if [ $# -eq 0 ]
    then
      echo "No arguments supplied."
    else
      echo "$# arguments supplied."
    fi
}


# Artisan: -a, --all Generate a migration, factory, and resource controller for the model
function mcr(){
  php artisan make:model $1 -a
}

#   ---------------------------------------
#    Internet Stuff
#   ---------------------------------------


# Have I been pwned?
# usage: `hibp email@example.com`
hibp() {
    curl -fsS "https://haveibeenpwned.com/api/v2/breachedaccount/$1" | jq -r 'sort_by(.BreachDate)[] | [.Title,.Domain,.BreachDate,.PwnCount] | @tsv' | column -t -s$'\t'
}

curlb(){
  curl -s -o /dev/null -w '%{time_starttransfer}\n' "$@"
}

function latencyavg()
{
  time=0.00
  for (( c=1; c<=$1; c++ ))
  do
     num1=$(curlb $2 -H 'Accept-Encoding: gzip, deflate, sdch' -H 'Accept-Language: en-US,en;q=0.8,ja;q=0.6' -H 'Upgrade-Insecure-Requests: 1' -H 'User-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10_11_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/50.0.2661.86 Safari/537.36' -H 'Connection: keep-alive' --compressed)
     echo "$c - $num1"
     time=$(echo "$time + $num1" | bc -l)
  done
  echo "Total Time $time"
  echo $(echo $time / $1 | bc -l)
}


